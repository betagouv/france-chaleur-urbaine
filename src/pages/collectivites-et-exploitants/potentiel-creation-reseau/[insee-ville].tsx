import Button from '@codegouvfr/react-dsfr/Button';
import { GetStaticPaths, InferGetStaticPropsType } from 'next';
import { useRouter } from 'next/navigation';
import React from 'react';

import SimplePage from '@components/shared/page/SimplePage';
import Box from '@components/ui/Box';
import Text from '@components/ui/Text';
import { getCommunePotentiel } from '@core/infrastructure/repository/zoneAPotentiel';

type PotentielCreationReseauPageProps = InferGetStaticPropsType<typeof getStaticProps>;

const PotentielCreationReseauPage: React.FC<PotentielCreationReseauPageProps> = ({ commune }) => {
  const router = useRouter();

  return (
    <SimplePage title="Potentiel de création de réseau" mode="public-fullscreen">
      <div className="fr-container fr-mt-2w">
        <div className="fr-grid-row">
          <div className="fr-col-4">
            <Button
              onClick={() => router.push('/collectivites-et-exploitants/potentiel-creation-reseau')}
              priority="secondary"
              size="small"
              iconId="fr-icon-arrow-left-line"
              className="fr-mb-2w"
            >
              Retour
            </Button>
            <h2>{commune.nom}</h2>
            <h3>
              {commune.nbZonesAFortPotentiel > 0
                ? 'Il existe un fort potentiel pour la création d’un réseau de chaleur sur votre territoire'
                : commune.nbZonesAPotentiel > 0
                ? 'Il existe un potentiel pour la création d’un réseau de chaleur sur votre territoire'
                : 'Une étude plus fine sur la base des consommations réelles des bâtiments est nécessaires'}
            </h3>
            {commune.nbZonesAPotentiel > 0 ? (
              <>
                <Box py="2w">
                  {commune.nbZonesAFortPotentiel > 0 ? (
                    <>
                      <Text color="success" className="fr-text--lg" fontWeight="bold">
                        {commune.nbZonesAFortPotentiel}
                      </Text>
                      <p className="fr-text--sm">
                        <strong>zones d’opportunité à fort potentiel</strong> identifiées. Il s’agit de secteurs sur lesquels le
                        développement d’un réseau de chaleur apparaît pertinent.
                      </p>
                    </>
                  ) : (
                    <>
                      <Text color="success" className="fr-text--lg" fontWeight="bold">
                        {commune.nbZonesAPotentiel}
                      </Text>
                      <p className="fr-text--sm">
                        <strong>zones d’opportunité à potentiel</strong> identifiées. Il s’agit de secteurs sur lesquels le développement
                        d’un réseau de chaleur apparaît possible.
                      </p>
                    </>
                  )}
                </Box>
                <Box py="2w">
                  <Text color="success" className="fr-text--lg" fontWeight="bold">
                    {commune.besoinsChauffage.toLocaleString('fr-FR', { maximumFractionDigits: 1 })} GWh/an
                  </Text>
                  <p className="fr-text--sm">
                    <strong>besoin en chauffage</strong> cumulés sur ces zones
                  </p>
                </Box>
                <Box py="2w">
                  <Text color="success" className="fr-text--lg" fontWeight="bold">
                    {commune.besoinsECS.toLocaleString('fr-FR', { maximumFractionDigits: 1 })} GWh/an
                  </Text>
                  <p className="fr-text--sm">
                    <strong>besoin en eau chaude sanitaire</strong> cumulés sur ces zones
                  </p>
                </Box>
              </>
            ) : null}
          </div>
        </div>
        <div className="fr-col-8"></div>
      </div>
    </SimplePage>
  );
};

export const getStaticProps = async ({ params }: { params: { 'insee-ville': string } }) => {
  const codeInsee = (params?.['insee-ville'] as string)?.split('-')[0];

  const commune = await getCommunePotentiel(codeInsee);

  if (!codeInsee) {
    return {
      notFound: true,
    };
  }
  return {
    props: {
      codeInsee,
      commune,
    },
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  return {
    paths: [],
    fallback: 'blocking',
  };
};

export default PotentielCreationReseauPage;
