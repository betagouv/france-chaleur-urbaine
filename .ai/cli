#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
AI_ROOT="$SCRIPT_DIR"
PROJECT_ROOT="$(dirname "$AI_ROOT")"

# Repository information
REPO_URL="https://github.com/betagouv/agnostic-ai"

# Detect if running from agnostic-ai repo or from a project
# Check if we're in the agnostic-ai repo by looking for templates/plugins in parent directories
if [ -d "$PROJECT_ROOT/templates/plugins" ]; then
    # Running from agnostic-ai repo (development mode) - installed in a project
    PLUGINS_DIR="$PROJECT_ROOT/templates/plugins"
elif [ -d "$PROJECT_ROOT/../plugins" ] && [ -d "$PROJECT_ROOT/../.ai" ]; then
    # Running from agnostic-ai repo (development mode) - running from templates/.ai
    PLUGINS_DIR="$PROJECT_ROOT/../plugins"
else
    # Running from a user project - plugins need to be fetched
    PLUGINS_DIR=""
fi

CONFIG_FILE="$AI_ROOT/config.jsonc"

# Global cleanup trap
TEMP_PLUGINS_DIR=""
cleanup() {
    if [ -n "$TEMP_PLUGINS_DIR" ] && [ -d "$TEMP_PLUGINS_DIR" ]; then
        rm -rf "$TEMP_PLUGINS_DIR"
    fi
}
trap cleanup EXIT

# Get plugins directory (download if needed)
get_plugins_dir() {
    if [ -n "$PLUGINS_DIR" ]; then
        # Development mode - use local plugins
        echo "$PLUGINS_DIR"
    else
        # Production mode - download from GitHub
        if [ -z "$TEMP_PLUGINS_DIR" ]; then
            TEMP_PLUGINS_DIR=$(mktemp -d)

            git clone --depth 1 --quiet "$REPO_URL" "$TEMP_PLUGINS_DIR" 2>/dev/null || {
                echo -e "${RED}‚ùå Failed to download plugin list${NC}"
                exit 1
            }
        fi
        echo "$TEMP_PLUGINS_DIR/templates/plugins"
    fi
}

# Check if .ai/config.jsonc exists
check_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        echo -e "${RED}‚ùå No .ai/config.jsonc found${NC}"
        echo "   Run 'install.sh' first to initialize the project"
        exit 1
    fi
}

# Get installed plugins from config
get_installed_plugins() {
    if [ -f "$CONFIG_FILE" ]; then
        # Strip comments from JSONC
        local config_json=$(grep -v '^\s*//' "$CONFIG_FILE" | sed 's|//.*||g')

        # Check if jq is available
        if command -v jq &> /dev/null; then
            echo "$config_json" | jq -r '.plugins[]' 2>/dev/null || echo ""
        else
            # Fallback: simple grep/sed parsing
            echo "$config_json" | grep -o '"plugins":\s*\[.*\]' | sed 's/.*\[//' | sed 's/\].*//' | tr ',' '\n' | tr -d ' "' | grep -v '^$'
        fi
    fi
}

# List available and installed plugins
list_plugins() {
    echo -e "${BLUE}Available plugins:${NC}"
    echo ""

    # Get installed plugins
    installed_plugins=($(get_installed_plugins))

    # Get plugins directory
    local plugins_dir=$(get_plugins_dir)

    # List all plugins from templates/plugins/
    for plugin_path in "$plugins_dir"/*; do
        if [ -d "$plugin_path" ]; then
            plugin_name=$(basename "$plugin_path")

            # Check if installed
            is_installed=false
            for installed in "${installed_plugins[@]}"; do
                if [ "$installed" = "$plugin_name" ]; then
                    is_installed=true
                    break
                fi
            done

            if [ "$is_installed" = true ]; then
                echo -e "  ${GREEN}‚úì${NC} $plugin_name ${YELLOW}(installed)${NC}"
            else
                echo -e "    $plugin_name"
            fi
        fi
    done
    echo ""
}

# Add a plugin
add_plugin() {
    local plugin_name="$1"

    if [ -z "$plugin_name" ]; then
        echo -e "${RED}‚ùå Plugin name required${NC}"
        echo "   Usage: .ai/cli plugins add <plugin-name>"
        exit 1
    fi

    check_config

    # Get plugins directory
    local plugins_dir=$(get_plugins_dir)

    # Check if plugin exists
    if [ ! -d "$plugins_dir/$plugin_name" ]; then
        echo -e "${RED}‚ùå Plugin '$plugin_name' not found${NC}"
        echo "   Run '.ai/cli plugins list' to see available plugins"
        exit 1
    fi

    # Check if already installed
    installed_plugins=($(get_installed_plugins))
    for installed in "${installed_plugins[@]}"; do
        if [ "$installed" = "$plugin_name" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Plugin '$plugin_name' already installed${NC}"
            exit 0
        fi
    done

    # Copy plugin files to .ai/<type>/<plugin-name>/
    echo -e "${BLUE}Installing plugin: $plugin_name${NC}"

    # Copy commands to .ai/commands/<plugin-name>/
    if [ -d "$plugins_dir/$plugin_name/commands" ]; then
        mkdir -p .ai/commands
        cp -r "$plugins_dir/$plugin_name/commands" ".ai/commands/$plugin_name"
        local cmd_count=$(find ".ai/commands/$plugin_name" -name "*.md" | wc -l | tr -d ' ')
        echo -e "${GREEN}‚úì${NC} Commands: $cmd_count ‚Üí .ai/commands/$plugin_name/"
    fi

    # Copy agents to .ai/agents/<plugin-name>/
    if [ -d "$plugins_dir/$plugin_name/agents" ]; then
        mkdir -p .ai/agents
        cp -r "$plugins_dir/$plugin_name/agents" ".ai/agents/$plugin_name"
        local agent_count=$(find ".ai/agents/$plugin_name" -name "*.md" | wc -l | tr -d ' ')
        echo -e "${GREEN}‚úì${NC} Agents: $agent_count ‚Üí .ai/agents/$plugin_name/"
    fi

    # Copy context to .ai/context/<plugin-name>/
    if [ -d "$plugins_dir/$plugin_name/context" ]; then
        mkdir -p .ai/context
        cp -r "$plugins_dir/$plugin_name/context" ".ai/context/$plugin_name"
        echo -e "${GREEN}‚úì${NC} Context ‚Üí .ai/context/$plugin_name/"
    fi

    # Update .ai/config.jsonc
    if command -v jq &> /dev/null; then
        # Strip comments, update with jq, then reconstruct with comments
        tmp=$(mktemp)
        config_json=$(grep -v '^\s*//' "$CONFIG_FILE" | sed 's|//.*||g')

        # Update plugins array
        echo "$config_json" | jq --arg plugin "$plugin_name" '.plugins += [$plugin]' > "$tmp"

        # Reconstruct JSONC with comments
        cat > "$CONFIG_FILE" << 'EOF'
{
  // Unified AI Configuration
  // This file is committed to git and shared across the team and all AI tools

  "version": "1.0.0",

  // Installed plugins
EOF
        echo "  \"plugins\": $(jq -c '.plugins' "$tmp")" >> "$CONFIG_FILE"
        echo "}" >> "$CONFIG_FILE"
        rm -f "$tmp"
    else
        # Fallback: manual update (preserves most of the file structure)
        sed -i.bak "s/\"plugins\": \[/\"plugins\": [\"$plugin_name\", /" "$CONFIG_FILE"
        rm -f "${CONFIG_FILE}.bak"
    fi

    echo -e "${GREEN}‚úÖ Plugin '$plugin_name' installed successfully${NC}"
}

# Migrate existing documentation to .ai/context
migrate() {
    echo -e "${BLUE}üîÑ Documentation Migration${NC}"
    echo ""

    # Detect configured IDEs by checking for their folders
    local configured_ides=()

    if [ -d "$PROJECT_ROOT/.claude" ]; then
        configured_ides+=("Claude Code")
    fi

    if [ -d "$PROJECT_ROOT/.cursor" ]; then
        configured_ides+=("Cursor")
    fi

    if [ ${#configured_ides[@]} -eq 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  No IDE configured yet${NC}"
        echo ""
        echo "Please configure an IDE first:"
        echo -e "  ${GREEN}.ai/cli configure${NC}"
        echo ""
        exit 1
    fi

    echo "This command will help you migrate existing documentation to .ai/context/"
    echo ""
    echo -e "${BLUE}Detected IDE(s):${NC}"
    for ide in "${configured_ides[@]}"; do
        echo "  - $ide"
    done
    echo ""

    echo -e "${YELLOW}To migrate your documentation, run the following command in your IDE:${NC}"
    echo ""
    echo -e "  ${GREEN}/core:migrate${NC}"
    echo ""

    if [ ${#configured_ides[@]} -gt 1 ]; then
        echo -e "${BLUE}Note:${NC} You can run this command in any of your configured IDEs."
        echo ""
    fi

    echo "This will:"
    echo "  1. Find all documentation files (README.md, CLAUDE.md, AGENTS.md, .mdc files)"
    echo "  2. Extract content and organize it into .ai/context/ files"
    echo "  3. Clean up original files and add breadcrumb comments"
    echo "  4. Rename CLAUDE.md files to AGENTS.md"
    echo ""
}

# Configure IDE symlinks
configure() {
    echo -e "${BLUE}üîß IDE Configuration${NC}"
    echo ""

    # Get templates directory
    local templates_dir
    if [ -d "$PROJECT_ROOT/templates/ides" ]; then
        # Development mode
        templates_dir="$PROJECT_ROOT/templates"
    else
        # Production mode - download templates
        if [ -z "$TEMP_PLUGINS_DIR" ]; then
            TEMP_PLUGINS_DIR=$(mktemp -d)
            git clone --depth 1 --quiet "$REPO_URL" "$TEMP_PLUGINS_DIR" 2>/dev/null || {
                echo -e "${RED}‚ùå Failed to download templates${NC}"
                exit 1
            }
        fi
        templates_dir="$TEMP_PLUGINS_DIR/templates"
    fi

    # Discover available IDEs
    local available_ides=()
    local ide_index=1
    echo -e "${BLUE}Available IDEs:${NC}"

    for ide_path in "$templates_dir/ides"/*; do
        if [ -d "$ide_path" ] && [ -f "$ide_path/init.sh" ]; then
            local ide_name=$(basename "$ide_path")
            available_ides+=("$ide_name")

            # Get display name
            local display_name
            case $ide_name in
                claude) display_name="Claude Code" ;;
                cursor) display_name="Cursor" ;;
                *) display_name="$ide_name" ;;
            esac

            echo "  $ide_index) $display_name"
            ((ide_index++))
        fi
    done

    if [ ${#available_ides[@]} -eq 0 ]; then
        echo -e "${RED}‚ùå No IDEs found${NC}"
        exit 1
    fi

    echo ""
    echo -e "${YELLOW}Enter your choice(s) (e.g., '1' or '1 2' or '2 1'):${NC}"
    read -p "Your choice: " -r IDE_CHOICES </dev/tty
    echo ""

    # Parse IDE choices
    local selected_ides=()
    for choice in $IDE_CHOICES; do
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#available_ides[@]} ]; then
            local ide_name="${available_ides[$((choice-1))]}"
            selected_ides+=("$ide_name")
        else
            echo -e "${RED}‚ùå Invalid choice: $choice${NC}"
            exit 1
        fi
    done

    # Check if at least one IDE was selected
    if [ ${#selected_ides[@]} -eq 0 ]; then
        echo -e "${RED}‚ùå No IDE selected${NC}"
        exit 1
    fi

    # Configure each selected IDE
    echo -e "${BLUE}üîÑ Configuring IDE(s)...${NC}"
    echo ""

    for ide in "${selected_ides[@]}"; do
        # Get IDE display name
        local display_name
        case $ide in
            claude) display_name="Claude Code" ;;
            cursor) display_name="Cursor" ;;
            *) display_name="$ide" ;;
        esac

        echo -e "${BLUE}Setting up $display_name...${NC}"

        # Run IDE init script
        local init_script="$templates_dir/ides/$ide/init.sh"
        if [ -f "$init_script" ]; then
            bash "$init_script" || {
                echo -e "${YELLOW}‚ö†Ô∏è  $display_name setup failed${NC}"
            }

            # Update .gitignore
            local ide_gitignore="$templates_dir/ides/$ide/.gitignore"
            if [ -f "$ide_gitignore" ]; then
                touch .gitignore

                # Check if we already have this IDE's gitignore section
                local ide_marker="# ${ide} - Auto-generated symlinks"
                if ! grep -q "$ide_marker" .gitignore; then
                    # Add a separator and marker
                    echo "" >> .gitignore
                    echo "# =============================================================================" >> .gitignore
                    echo "$ide_marker" >> .gitignore
                    echo "# ‚ö†Ô∏è  Auto-generated - Do not edit manually" >> .gitignore
                    echo "# =============================================================================" >> .gitignore

                    # Append the gitignore content directly
                    while IFS= read -r line; do
                        # Skip empty lines and comments from template
                        if [[ -n "$line" ]] && [[ ! "$line" =~ ^# ]]; then
                            echo "$line" >> .gitignore
                        fi
                    done < "$ide_gitignore"

                    echo -e "${GREEN}‚úì${NC} Updated .gitignore for $display_name"
                fi
            fi

            echo ""
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Init script not found for $display_name${NC}"
            echo ""
        fi
    done

    echo -e "${GREEN}‚úÖ IDE configuration complete!${NC}"
    echo ""
}

# Update configuration and installed plugins
update() {
    check_config

    echo -e "${BLUE}Updating unified AI configuration...${NC}"

    # Download update.sh from GitHub
    UPDATE_SCRIPT_URL="https://raw.githubusercontent.com/betagouv/agnostic-ai/main/update.sh"
    TEMP_UPDATE=$(mktemp)

    if curl -fsSL "$UPDATE_SCRIPT_URL" -o "$TEMP_UPDATE"; then
        bash "$TEMP_UPDATE"
        rm -f "$TEMP_UPDATE"
    else
        echo -e "${RED}‚ùå Failed to download update script${NC}"
        rm -f "$TEMP_UPDATE"
        exit 1
    fi
}

# Show help
show_help() {
    echo "agnostic-ai - Unified AI Configuration Tool"
    echo ""
    echo "Share one AI configuration across all your AI coding tools"
    echo ""
    echo "Usage:"
    echo "  .ai/cli migrate                  Migrate documentation to .ai/context"
    echo "  .ai/cli configure                Configure IDE symlinks"
    echo "  .ai/cli plugins list             List available plugins"
    echo "  .ai/cli plugins add <plugin>     Install a plugin"
    echo "  .ai/cli update                   Update configuration and plugins"
    echo "  .ai/cli help                     Show this help"
    echo ""
}

# Main command dispatcher
case "${1:-}" in
    migrate)
        migrate
        ;;
    configure)
        configure
        ;;
    plugins)
        case "${2:-}" in
            list)
                list_plugins
                ;;
            add)
                add_plugin "$3"
                ;;
            *)
                echo -e "${RED}‚ùå Unknown plugins command: ${2:-}${NC}"
                echo "   Usage: .ai/cli plugins [list|add]"
                exit 1
                ;;
        esac
        ;;
    update)
        update
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Unknown command: ${1:-}${NC}"
        show_help
        exit 1
        ;;
esac
